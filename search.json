[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pblog",
    "section": "",
    "text": "Some Highcharter Graphs\n\n\n\n\n\n\ncode\n\n\ngraphics\n\n\nr\n\n\n\n\n\n\n\n\n\nJan 12, 2025\n\n\nPaul Smith\n\n\n\n\n\n\n\n\n\n\n\n\nA First Foray into Genetics, GWAS, and Mendelian Randomisation\n\n\n\n\n\n\ngenetics\n\n\ngwas\n\n\nmendelian randomisation\n\n\n\n\n\n\n\n\n\nJan 11, 2025\n\n\nPaul Smith\n\n\n\n\n\n\n\n\n\n\n\n\nGetting Started with Accessible Highcharter\n\n\n\n\n\n\ncode\n\n\naccessibility\n\n\ngraphics\n\n\nr\n\n\n\n\n\n\n\n\n\nDec 16, 2024\n\n\nPaul Smith\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/01-highcharter/index.html",
    "href": "posts/01-highcharter/index.html",
    "title": "Getting Started with Accessible Highcharter",
    "section": "",
    "text": "Inspired by the quarto and me blog, I am looking into using {highcharter} (Kunst 2022). This package is a wrapper for Highcharts – an interactive charting library1.\n\nKunst, Joshua. 2022. Highcharter: A Wrapper for the ’Highcharts’ Library. https://CRAN.R-project.org/package=highcharter.\n1 this needs a license for commercial and governmental useIn this post I will only be considering a scatter graph. Different plots – including survival curves – will come later.\n\n\n\nMy main requirements are mostly subjective:\n\nLooks nice\nIs interactive in a nice and obvious way\nIs accessible, following advice given by the Government Analysis Function"
  },
  {
    "objectID": "posts/01-highcharter/index.html#introduction",
    "href": "posts/01-highcharter/index.html#introduction",
    "title": "Getting Started with Accessible Highcharter",
    "section": "",
    "text": "Inspired by the quarto and me blog, I am looking into using {highcharter} (Kunst 2022). This package is a wrapper for Highcharts – an interactive charting library1.\n\nKunst, Joshua. 2022. Highcharter: A Wrapper for the ’Highcharts’ Library. https://CRAN.R-project.org/package=highcharter.\n1 this needs a license for commercial and governmental useIn this post I will only be considering a scatter graph. Different plots – including survival curves – will come later.\n\n\n\nMy main requirements are mostly subjective:\n\nLooks nice\nIs interactive in a nice and obvious way\nIs accessible, following advice given by the Government Analysis Function"
  },
  {
    "objectID": "posts/01-highcharter/index.html#getting-started-with-highcharter",
    "href": "posts/01-highcharter/index.html#getting-started-with-highcharter",
    "title": "Getting Started with Accessible Highcharter",
    "section": "Getting started with {highcharter}",
    "text": "Getting started with {highcharter}\nLets use the {palmerpenguins} data2 (Horst, Hill, and Gorman 2020).\n2 because penguins are nicer than eugenicists\nHorst, Allison Marie, Alison Presmanes Hill, and Kristen B Gorman. 2020. Palmerpenguins: Palmer Archipelago (Antarctica) Penguin Data. https://doi.org/10.5281/zenodo.3960218.\nThis is also the first time I have used the base R pipe |&gt;, after a life-time (well, 5 years) of using %&gt;%. The differences between the two are explain in this tidyverse blog. This means that the below code will not work on R versions prior to 4.1.0.\n\n\nCode\nlibrary(highcharter)\nlibrary(palmerpenguins)\n\n#data(package = 'palmerpenguins')\n\npenguins\n\n\n\n  \n\n\n\nA basic scatter graph, using the hchart function. Here, hcaes is similar in spirit to ggplot’s aes.\n\n\nCode\nhchart(penguins,\"scatter\", \n       hcaes(x = flipper_length_mm, y = bill_length_mm, group = species))\n\n\n\n\n\n\n\n\n\n\nSimple changes\nLets change a few things about the plot:\n\nAdd \\(x\\) and \\(y\\) axis labels;\nAdd a title and subtitle;\nAdd a source;\nChange the colours to the Government Analysis Function categorical data colour palette;\nMake the hover box specify ‘flipper length’ and ‘bill length’.\n\n\n\n\n\n\nGovernment analysis function colour palette\n\n\n\n\nCode\nhc_penguins &lt;- hchart(penguins,\"scatter\", \n       hcaes(x = flipper_length_mm, y = bill_length_mm, group = species)) |&gt;\n  # x axis label\n  hc_xAxis(title = list(text = \"Flipper Length (mm)\")) |&gt;\n  # y axis label\n  hc_yAxis(title = list(text = \"Bill Length (mm)\")) |&gt;\n  # title and subtitle\n  hc_title(text = \"Gentoo's have &lt;i&gt;big&lt;/i&gt; flippers!\",\n           margin = 20, # space between title (or subtitle) and plot [default = 15]\n           align = \"left\",\n           stlyle = list(useHTML = TRUE)) |&gt;\n  hc_subtitle(text = \"A scatter graph showing the relationship between flipper length \n              and bill length, for Adelie, Chinstrap and Gentoo penguins\",\n              align = \"left\") |&gt;\n  # a source\n hc_credits(\n    text = \"Chart created using R and highcharter\",\n    href = \"http://jkunst.com/highcharter\",\n    enabled = TRUE\n    ) |&gt;\n  # hover box options\n  hc_tooltip(\n    headerFormat = \"&lt;b&gt;{series.name}&lt;/b&gt;&lt;br&gt;\",\n    pointFormat = \"Flipper Length: {point.x} mm&lt;br&gt;Bill Length: {point.y} mm\"\n    #&gt; valueSuffix applies globally but only when values are displayed individually\n    #&gt; here, displayed twice so hard-coded into 'pointFormat'\n    #&gt;valueSuffix = \" mm\"\n  ) |&gt;\n  hc_colors(c(\"#12436D\", \"#28A197\", \"#801650\"))\n  \nhc_penguins"
  },
  {
    "objectID": "posts/01-highcharter/index.html#adding-accessibility",
    "href": "posts/01-highcharter/index.html#adding-accessibility",
    "title": "Getting Started with Accessible Highcharter",
    "section": "Adding accessibility",
    "text": "Adding accessibility\nHere we assume the visually aspects of the graph are accessible.3 In this section I will add the following capabilities to the graph.\n3 This is probably a big assumption. I am assuming the following information given by the Government Analysis Function (which apply to static charts) has been applied:\n\nGuidance on designing charts.\nGuidance on the use of colour. For alternative colour palettes, consider Paul Tol’s notes\n\n\nThe ability to download the data;\nKeyboard navigation;\nAlt text, following guidance given by Amy Cesal in her blog post, “Writing Alt Text for Data Visualization”.\n\n\nExporting the data\nFirst, lets try and include a menu to export the data and the plot as an image – this requires using a module. Examples of using modules and plug-ins4 in {highcharter} are given in the modules vignette.\n4 I’m not sure what the difference is between a ‘module’ and a ‘plug-in’, except that the ‘.js’ files seem to live in different folders.\n\nCode\nhc_penguins2 &lt;- hc_penguins |&gt;\n  #hc_add_dependency(name = \"modules/exporting.js\") |&gt; \n  #hc_add_dependency(name = \"modules/export-data.js\") |&gt; \n  hc_exporting(\n    enabled = TRUE,\n    filename = \"palmer_penguins\"\n  )\n\nhc_penguins2\n\n\n\n\n\n\n\n\n\n\n\n\nComment on hc_add_dependency\n\n\n\nIn the quartoandme blog, the following lines are included in the ‘working example’:\n  hc_add_dependency(name = \"modules/accessibility.js\") |&gt; \n  hc_add_dependency(name = \"modules/exporting.js\") |&gt; \n  hc_exporting(\n    enabled = TRUE\n  )\nBut, (I think) the hc_exporting() function automatically includes the exporting.js and export-data.js modules when enabled = TRUE, so the two hc_add_dependency calls are unnecessary. I’m willing to be proved wrong here.\n\n\n\n\nKeyboard navigation\nTo get keyboard navigation working, we need to use the accessibility Highchart module.\n\n\n\n\n\n\nRequired changes to {highcharter} v0.9.4\n\n\n\nIf using v0.9.4 of {highcharter}, then copying the code below will result in no plot being output. This is a known issue, and is discussed in the GitHub repo issue 755.\nThere are two ways to fix this issue:\n\nUncomment the accessibility module in the ‘highcharts.yaml’ file.5 On my Mac, this is found at /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/highcharter/htmlwidgets (for your computer, use .libPaths() to find the default path for packages). The line\n\n    # - modules/accessibility.js\n    needs to be edited to be\n    - modules/accessibility.js\n    before loading the package into R.\n\nInstall an older version of {highcharter}, for example,6\n\nremotes::install_github(\"jbkunst/highcharter@8ff41366c8c411b497b5378d27be48617360f81f\")\n\n\n6 taken from mfherman’s reply to GitHub issue 755.5 Discussed by batpigandme in their reply to GitHub issue 755.\n\nCode\nhc_penguins3 &lt;- hc_penguins |&gt;\n  #hc_add_dependency(name = \"modules/exporting.js\") |&gt; \n  #hc_add_dependency(name = \"modules/export-data.js\") |&gt; \n  hc_add_dependency(name = \"modules/accessibility.js\") |&gt; \n  hc_exporting(\n    accessibility = list(\n      enabled = TRUE # default value is TRUE\n      ),\n    enabled = TRUE,\n    filename = \"palmer_penguins\"\n  ) |&gt;\n  hc_plotOptions(\n    accessibility = list(\n      enabled = TRUE,\n      keyboardNavigation = list(enabled = TRUE)\n      )\n    )\n\nhc_penguins3\n\n\n\n\n\n\n\n\nAlt text\n\n\n\n\n\nExample alt-text format for data viz, from Amy Cesal’s Medium post\n\n\nIn this section we add alt-text to the plot, to allow those using screen readers to understand the plot. )\nFirst, lets add accessible descriptions to the plot, by enabling the accessibility options in hc_xAxis and hc_yAxis.\n\n\nCode\nhc_penguins4 &lt;- hchart(penguins,\"scatter\", \n       hcaes(x = flipper_length_mm, y = bill_length_mm, group = species)) |&gt;\n  hc_add_dependency(name = \"modules/accessibility.js\") |&gt; \n  # x axis label\n  hc_xAxis(title = list(text = \"Flipper Length (mm)\"),\n           accessibility = list(\n                   enabled = TRUE,\n                   description = \"flipper length in millimeters\"\n           )) |&gt;\n  # y axis label\n  hc_yAxis(title = list(text = \"Bill Length (mm)\"),\n           accessibility = list(\n                   enabled = TRUE,\n                   description = \"bill length in millimeters\"\n           )) |&gt;\n  # title and subtitle\n  hc_title(text = \"Gentoo's have &lt;i&gt;big&lt;/i&gt; flippers!\",\n           margin = 20, # space between title (or subtitle) and plot [default = 15]\n           align = \"left\",\n           stlyle = list(useHTML = TRUE)) |&gt;\n  hc_subtitle(text = \"A scatter graph showing the relationship between flipper length \n              and bill length, for Adelie, Chinstrap and Gentoo penguins\",\n              align = \"left\") |&gt;\n  # a source\n hc_credits(\n    text = \"Chart created using R and highcharter\",\n    href = \"http://jkunst.com/highcharter\",\n    enabled = TRUE\n    ) |&gt;\n  # hover box options\n  hc_tooltip(\n    headerFormat = \"&lt;b&gt;{series.name}&lt;/b&gt;&lt;br&gt;\",\n    pointFormat = \"Flipper Length: {point.x} mm&lt;br&gt;Bill Length: {point.y} mm\"\n    #&gt; valueSuffix applies globally but only when values are displayed individually\n    #&gt; here, displayed twice so hard-coded into 'pointFormat'\n    #&gt;valueSuffix = \" mm\"\n  ) |&gt;\n  hc_colors(c(\"#12436D\", \"#28A197\", \"#801650\")) |&gt;\n  hc_exporting(\n    accessibility = list(\n      enabled = TRUE # default value is TRUE\n      ),\n    enabled = TRUE,\n    filename = \"palmer_penguins\"\n  ) |&gt;\n  hc_plotOptions(\n    accessibility = list(\n      enabled = TRUE,\n      keyboardNavigation = list(enabled = TRUE)\n      )\n    )\n  \nhc_penguins4\n\n\n\n\n\n\nNote that the desciption in hc_xAxis and hc_yAxis does not start with a capital letter. The reason why is clear from looking at the html output below. Here, aria-hidden=\"false\" refers to Accessible Rich Internet Applications, and is telling screen readers not to ignore this section.\n&lt;div id=\"highcharts-screen-reader-region-before-4\"\naria-label=\"Chart screen reader information, Gentoo's have big flippers!.\"\nstyle=\"position: relative;\" role=\"region\" aria-hidden=\"false\"&gt;\n...\n&lt;h4&gt;Gentoo's have big flippers!&lt;/h4&gt;\n&lt;div&gt;Scatter chart with 3 data series.&lt;/div&gt;\n...\n&lt;div&gt;The chart has 1 X axis displaying flipper length in millimeters. Range: 171.41 to 231.59.&lt;/div&gt;\n&lt;div&gt;The chart has 1 Y axis displaying bill length in millimeters. Range: 30 to 65.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;\nThe alt-text is saved as a string to the alt_text_penguins object.\n\n\nCode\nalt_text_penguins &lt;- \"A scatter plot displays the relationship between bill\n        length (mm) on the y-axis and flipper length (mm) on the x-axis for\n        three penguin species: Adelie, Chinstrap, and Gentoo. Each species is\n        represented by a different colour: dark blue for Adelie, teal for Chinstrap,\n        and burgundy for Gentoo. Gentoo penguins have the largest flipper and bill\n        lengths, forming a distinct cluster towards the upper right of the graph.\n        Adelie penguins have smaller flipper and bill lengths, clustering at the lower\n        left, while Chinstrap penguins are positioned between the other two species.\n        The chart highlights that Gentoo penguins have notably large flippers.\"\n\n\n\nUsing Highchart accessibility description\nThe simple way to include this alt-text in the plot would be to use the hc_chart() function with the accessibility.description option set to equal alt_text_penguins. But, as discussed in the Highcharts accessibility documentation,\n\nNote: Since Highcharts now supports captions and linked descriptions, it is preferred to define the description using those methods, as a visible caption/description benefits all users. If the accessibility.description option is defined, the linked description is ignored, and the caption is hidden from screen reader users.\n\n\n\nCode\nhc_penguins4 |&gt;\n  hc_chart(\n    accessibility = list(\n      description = alt_text_penguins\n    )\n  )\n\n\n\n\n\n\n\n\nUsing linkedDescription\nHere, we first define an external HTML element, where the &lt;div&gt; with an ID (chart-description) contains the description of the chart. Then, then the linkedDescription option in hc_chart(accessibility = ...) connects the chart to the &lt;div&gt; by its ID.\n\n\nIf accessibility.description is also defined in the chart, it will override the linked description, as mentioned in the documentation.\n\n\nCode\n# Add an external description for the chart\ndescription_id &lt;- \"chart-description\"\n\ncat(sprintf(\n  '&lt;div id=\"%s\"&gt;\n    A scatter plot displays the relationship between bill length (mm) on the y-axis \n    and flipper length (mm) on the x-axis for three penguin species: Adelie, Chinstrap, \n    and Gentoo. Each species is represented by a different colour: dark blue for Adelie, \n    teal for Chinstrap, and burgundy for Gentoo. Gentoo penguins have the largest flipper \n    and bill lengths, forming a distinct cluster towards the upper right of the graph. \n    Adelie penguins have smaller flipper and bill lengths, clustering at the lower left, \n    while Chinstrap penguins are positioned between the other two species. \n    The chart highlights that Gentoo penguins have notably large flippers.\n  &lt;/div&gt;',\n  description_id\n))\n\n\n&lt;div id=\"chart-description\"&gt;\n    A scatter plot displays the relationship between bill length (mm) on the y-axis \n    and flipper length (mm) on the x-axis for three penguin species: Adelie, Chinstrap, \n    and Gentoo. Each species is represented by a different colour: dark blue for Adelie, \n    teal for Chinstrap, and burgundy for Gentoo. Gentoo penguins have the largest flipper \n    and bill lengths, forming a distinct cluster towards the upper right of the graph. \n    Adelie penguins have smaller flipper and bill lengths, clustering at the lower left, \n    while Chinstrap penguins are positioned between the other two species. \n    The chart highlights that Gentoo penguins have notably large flippers.\n  &lt;/div&gt;\n\n\n\n\nCode\nhc_penguins4 |&gt;\n  hc_chart(\n    accessibility = list(\n      linkedDescription = description_id\n    )\n  )"
  },
  {
    "objectID": "posts/01-highcharter/index.html#finished",
    "href": "posts/01-highcharter/index.html#finished",
    "title": "Getting Started with Accessible Highcharter",
    "section": "Finished",
    "text": "Finished\nWhat have we achieved here? I think we have some good looking graphs, which contain some accessibility features to increase integration with screen-readers. The {highcharter} package seems relatively easy to use, even though the syntax is a little different to what I’m used to (from base R and {ggplot2}).\nWe have:\n\nAdded \\(x\\) and \\(y\\) axis labels, and used these labels in the hover box text.\nAdded a title, subtitle, and a source.\nChanged the colours of the points.\nAllowed for exporting of the data, via hc_exporting().\nAllowed for keyboard navigation, including in the drop-down menu, using hc_add_dependency().\nAdded alt-text, via both description and linkedDescription options.\n\nThe next time I look at Highcharts and {highcharter}, I will be creating different graphs to see what capabilities Highcharts has, and whether it could be useful in my work."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is a little space on the internet where probably nobody walks except me and my thoughts. Mainly about maths and R, sometimes both, very occasionally neither. I hope some of these posts are useful to someone."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nUniversity of Leeds | PhD in Statistics | September 2016 - August 2020\nUniversity of Bristol | MMath | September 2011 - June 2015\nUniversity of Hull | PGCE | September 2020 - June 2021"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nNHS Blood and Transplant, Bristol | Statistician | November 2023 - present\nEquality and Human Rights Commission, Cardiff | Statistician | April 2023 - October 2023 (Maternity Cover)\nSecondary School, Bath | Maths Teacher | September 2020 - August 2022\nKPMG, London | Investment Advisor | September 2015 - August 2016"
  },
  {
    "objectID": "posts/02-mandelian_randomisation/index.html",
    "href": "posts/02-mandelian_randomisation/index.html",
    "title": "A First Foray into Genetics, GWAS, and Mendelian Randomisation",
    "section": "",
    "text": "In the previous few weeks I have been trying to learn about Mendelian Randomisation, which has resulted in me doing a whistle-stop tour around genetics, codons, and genetic-wide association studies (GWAS). This post is a collection of my notes and thoughts.1\n1 Please let me know if there are any mistakes or misconceptions"
  },
  {
    "objectID": "posts/02-mandelian_randomisation/index.html#introduction",
    "href": "posts/02-mandelian_randomisation/index.html#introduction",
    "title": "A First Foray into Genetics, GWAS, and Mendelian Randomisation",
    "section": "",
    "text": "In the previous few weeks I have been trying to learn about Mendelian Randomisation, which has resulted in me doing a whistle-stop tour around genetics, codons, and genetic-wide association studies (GWAS). This post is a collection of my notes and thoughts.1\n1 Please let me know if there are any mistakes or misconceptions"
  },
  {
    "objectID": "posts/02-mandelian_randomisation/index.html#genetics-for-dummys",
    "href": "posts/02-mandelian_randomisation/index.html#genetics-for-dummys",
    "title": "A First Foray into Genetics, GWAS, and Mendelian Randomisation",
    "section": "Genetics for dummys",
    "text": "Genetics for dummys\n\n\n\n\n\n\nNote\n\n\n\nBefore diving in, it’s worth remarking that the field of genetics was created before anyone had any idea about the structure of a cell, what DNA looked like, and what chromosomes were. This means the language around this topic can be somewhat confusing for a newcomer, as old terms are still floating around, and overlapping with newer more precise terms.\n\n\nLet’s start by describing the basic mechanics of genetic material and cells. In humans, most cell contains DNA, which is packaged in 23 chromosomes2. DNA is a long code created from four nucleotides – adenine (A), guanine (G), cytosine (C), and thymine (T) – which are paired with each other (AT and CG) to create base pairs. Parts of the DNA do a specific job, and are known as genes. These genes either code for proteins, or help control other genes. Genes are small sections of DNA that have the ability to be copied into an RNA sequence, which can then encode for proteins (or perform other tasks).\n2 by being tightly coiled around proteins known as histones3 The full table showing these combinations can be seen hereA single-nucleotide polymorphism (SNP) is when there is a substitution in a single nucleotide. A SNP in a gene can create differences within populations, for example in the ability to metabolise alcohol. Most of the time, however, they do not create any differences, as when the RNA from genes are read, they are done in codons. A codon is a set of three base pairs, and therefore there are \\(2^4 = 64\\) different combinations of the four nucleotides (\\(61\\) of which specify amino acids). However, as there are only \\(20\\) amino acids, there are many codons with different base pairs that produce the same amino acids. For example, UCU, UCC, UCA, UCG, AGU, AGC all produce the Serine amino acid.3\n\nA short history\nLets start with Gregor Mendel, as he is the “father of modern genetics” and well known for his experiments into the inheritance of pea plants. I won’t go into detail on him, as Wikipedia can do that for me. However, two quick points to make:\n\nThe Laws of Inheritance are important pre-requisite conditions for Mendelian Randomisation to work.\nThe genius of Mendel was his ability to understand that the underlying process was random and he was only observing a realisation of this random process.\n\nThe double-helix structure of DNA was discovered by Rosalind Franklin, James Watson and Francis Crick in 1953. This knowledge of the structure allowed the further discoveries of how proteins are translated from RNA, which is transcribed by DNA.\n\nBiobanks\nIn the last twenty years or so, large biobanks have been created. These store the genetic and health information of individuals, either at a single point in time or with a temporal aspect. Two examples of large biobanks are:\n\nThe UK Biobank has information on around half-a-million individuals aged between 40 and 69.\nThe Avon Longitudinal Study of Parents and Children. Here, more than 14,000 pregnant women were recruited into the study in 1991/92, with their children, and grandchildren, being followed up in detail.\n\nOne important caveat for these biobanks when using them for research is that they are not representative of the population of the UK. For example, it is known that the individuals in the UK Biobank are more likely to be in a higher social-economic bracket, with fewer lung cancers and other health issues than the general population. This makes performing analysis and obtaining generalisable result (using GWAS4 and Mendelian Randomisation) more difficult.\n4 genome-wise association studies\n\nGenome-wise associated studies\nGenome-wide association studies (GWAS) attempt to find associations between genetic variants and phenotypes. The genetic variants considered are usually SNPs, as opposed to indels5. As biobank sequencing is normally short-read (i.e. only a small section of DNA is read at a time) and the location of these short-reads are random,6 it is trickier to notice indels compared to SNPs. It is also worth noting here that when an individual’s genome is sequenced, the result isn’t the sequence of DNA in a specific cell, but instead is an average. This means that the SNPs in the sequences obtained were present in most of the cells within the individual so most likely have been there since the very early cell division stages. Therefore, if certain SNPs are associated with phenotypes, then the relationship can be thought of a “lifetime” association.\n5 insertions and deletions6 I am not sure if they are truely random along the whole of the DNA - it might just be that there is some uncertainty in the exact location"
  },
  {
    "objectID": "posts/02-mandelian_randomisation/index.html#mendelian-randomisation",
    "href": "posts/02-mandelian_randomisation/index.html#mendelian-randomisation",
    "title": "A First Foray into Genetics, GWAS, and Mendelian Randomisation",
    "section": "Mendelian Randomisation",
    "text": "Mendelian Randomisation"
  },
  {
    "objectID": "posts/03-highcharter_graphs/index.html",
    "href": "posts/03-highcharter_graphs/index.html",
    "title": "Some Highcharter Graphs",
    "section": "",
    "text": "In my previous post about {highcharter}, I considered changing some of the defaults for a scatter graph to make it look more appealing and be more accessible. This post will focus on plotting the following different types of graphs:\n\nBar charts, including grouped bar charts\nIcon plots\nLine graphs\nSurvival plots (Kaplan-Meier and Cox proportional hazards)\nMaps\n\nFirst, we will load the packages we require in this post. The {highcharter} (Kunst 2022) and {tidyverse} (Wickham et al. 2019) packages are used throughout. The {medicaldata} package (Higgins 2021) is used to create the bar charts, line graphs and survival plots. The icon plots use data obtained via the {clmnis} package (Dempsey 2025), and the maps use data from the {gapminder} package.\n\nKunst, Joshua. 2022. Highcharter: A Wrapper for the ’Highcharts’ Library. https://CRAN.R-project.org/package=highcharter.\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\nHiggins, Peter. 2021. Medicaldata: Data Package for Medical Datasets. https://CRAN.R-project.org/package=medicaldata.\n\n\nCode\nlibrary(highcharter)\nlibrary(tidyverse)\n\n# medical data package\n# use 'remotes::install_github(\"higgi13425/medicaldata\")' to access the 'thiomon' dataset\nlibrary(medicaldata)\n\n# obtaining MP information\n# remotes::install_github(\"houseofcommonslibrary/clmnis\")\nlibrary(clmnis)\n\nlibrary(fontawesome)"
  },
  {
    "objectID": "posts/03-highcharter_graphs/index.html#introduction",
    "href": "posts/03-highcharter_graphs/index.html#introduction",
    "title": "Some Highcharter Graphs",
    "section": "",
    "text": "In my previous post about {highcharter}, I considered changing some of the defaults for a scatter graph to make it look more appealing and be more accessible. This post will focus on plotting the following different types of graphs:\n\nBar charts, including grouped bar charts\nIcon plots\nLine graphs\nSurvival plots (Kaplan-Meier and Cox proportional hazards)\nMaps\n\nFirst, we will load the packages we require in this post. The {highcharter} (Kunst 2022) and {tidyverse} (Wickham et al. 2019) packages are used throughout. The {medicaldata} package (Higgins 2021) is used to create the bar charts, line graphs and survival plots. The icon plots use data obtained via the {clmnis} package (Dempsey 2025), and the maps use data from the {gapminder} package.\n\nKunst, Joshua. 2022. Highcharter: A Wrapper for the ’Highcharts’ Library. https://CRAN.R-project.org/package=highcharter.\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\nHiggins, Peter. 2021. Medicaldata: Data Package for Medical Datasets. https://CRAN.R-project.org/package=medicaldata.\n\n\nCode\nlibrary(highcharter)\nlibrary(tidyverse)\n\n# medical data package\n# use 'remotes::install_github(\"higgi13425/medicaldata\")' to access the 'thiomon' dataset\nlibrary(medicaldata)\n\n# obtaining MP information\n# remotes::install_github(\"houseofcommonslibrary/clmnis\")\nlibrary(clmnis)\n\nlibrary(fontawesome)"
  },
  {
    "objectID": "posts/03-highcharter_graphs/index.html#bar-charts",
    "href": "posts/03-highcharter_graphs/index.html#bar-charts",
    "title": "Some Highcharter Graphs",
    "section": "Bar charts",
    "text": "Bar charts\nFor the bar charts, I’m using data obtained from the {medicaldata} package. Loading the Covid data1, and ensuring factors are coded correctly.\n1 Description of the dataset can be found here\n\nCode\ncovid &lt;- tibble(medicaldata::covid_testing)\n\ncovid &lt;- covid |&gt;\n  mutate(across(c(gender, test_id, demo_group, drive_thru_ind, result, payor_group, patient_class), as_factor))\n\n# look at levels of the factors\n#sapply(covid[, c(\"gender\", \"test_id\", \"demo_group\", \"drive_thru_ind\", \"result\", \"payor_group\", \"patient_class\")], levels)\n\ncovid\n\n\n\n  \n\n\n\nLet’s start with a simple bar chart, showing the frequency of negative and positive Covid results.\nFirst we create counts of positive, negative and invalid results.\n\n\nCode\nresult_counts &lt;- covid |&gt;\n  count(result) |&gt;\n  # capitalise first letter\n  mutate(result = str_to_title(as.character(result))) |&gt;\n  arrange(desc(n))\n\n\n\n\nCode\n# Create the bar chart\nhchart(\n    result_counts,\n    type = \"bar\",\n    hcaes(x = result, y = n),\n    name = \"Results\"\n  ) |&gt;\n  hc_title(text = \"Results of Covid Tests\") |&gt;\n  hc_xAxis(title = list(text = \"Result\")) |&gt;\n  hc_yAxis(title = list(text = \"Count\")) |&gt;\n  hc_colors(\"#003087\") |&gt;\n  # a source\n  hc_credits(\n    text = \"Data obtained from the {medicaldata} package\",\n    href = \"https://higgi13425.github.io/medicaldata/\",\n    enabled = TRUE\n    ) \n\n\n\n\n\n\n\nGrouped bar chart\nGroup results by gender.\n\n\nCode\nresult_counts_gender &lt;- covid |&gt;\n  group_by(gender) |&gt;\n  count(result) |&gt;\n  # capitalise first letter\n  mutate(result = str_to_title(as.character(result)))\n\n\n\n\n\n\n\n\nThe hover box issues\n\n\n\nThe hard part here seems to be getting the hover box to output the correct things. Specifically, I don’t know how to get the names of the y-axis titles (“Positive”, etc.), without doing nested if statements. It must involve the formatter but I’m not sure how.\nFIXED: use this.key to get the names.\n\n\n\n\nCode\nhchart(\n  result_counts_gender,\n  type = \"bar\",\n  hcaes(x = result, y = n, group = gender) \n  ) |&gt;\n  hc_colors(c(\"#003087\", \"#006747\")) |&gt;\n  hc_title(text = \"Lots of people don't have Covid\",\n           align = \"left\") |&gt;\n  hc_subtitle(text = \"A bar chart showing Covid test results, split by gender.\",\n              align = \"left\") |&gt;\n  hc_xAxis(title = list(text = \"Result\")) |&gt;\n  hc_yAxis(title = list(text = \"Count\")) |&gt;\n  # a source\n  hc_credits(\n    text = \"Data obtained from the {medicaldata} package\",\n    href = \"https://higgi13425.github.io/medicaldata/\",\n    enabled = TRUE\n    ) |&gt;\n   hc_tooltip(\n      formatter = JS(\"function () {\n       if (this.series.name == 'male') {\n        return `&lt;b&gt;Male&lt;/b&gt;&lt;/br&gt;${this.y} ${this.key} results`\n      } else if (this.series.name == 'female') {\n        return `&lt;b&gt;Female&lt;/b&gt;&lt;/br&gt; ${this.y} ${this.key} results`\n      }}\")\n   )"
  },
  {
    "objectID": "posts/03-highcharter_graphs/index.html#icons-plot",
    "href": "posts/03-highcharter_graphs/index.html#icons-plot",
    "title": "Some Highcharter Graphs",
    "section": "Icons plot",
    "text": "Icons plot\nLet’s look at the gender split in parliament as of 31st December 2024. We can extract the data using {clmnis} (Dempsey 2025), which is an R package for downloading data from the UK Parliament’s Members Names Information Service (MNIS).\n\nDempsey, Noel. 2025. Clmnis: An r Package for Downloading Data from the Parliamentary Members Names Information Service. https://github.com/houseofcommonslibrary/clmnis.\nObtaining the data:\n\n\nCode\nmps &lt;- clmnis::fetch_mps(on_date = \"2024-12-31\")\n\nmps\n\n\n\n  \n\n\n\n\n\nCode\nmps_gender &lt;- mps |&gt;\n  count(gender) |&gt;\n  mutate(\n    gender = case_match(\n      gender,\n      \"M\" ~ \"Male MPs\",\n      \"F\" ~ \"Female MPs\"\n    )\n  ) |&gt;\n  add_column(col = c(\"#4477AA\", \"#EE6677\"))\n        \nmps_gender\n\n\n\n  \n\n\n\n\nA basic icon chart\nPlotting a simple icon chart. Choose between the “parliament view” and the “circular view” by selecting the relevant tab below.\n\nParliament viewCircle view\n\n\n\n\nCode\nhchart(\n  mps_gender,\n  \"item\",\n  hcaes(\n    name = gender,\n    y = n,\n    color = col\n  ),\n  name = \"Number of MPs\",\n  showInLegend = TRUE,\n  size = \"100%\",\n  center = list(\"50%\", \"75%\"),\n  startAngle = -100,\n  endAngle  = 100\n) %&gt;%\n  hc_title(\n    text = \"Male MPs make up a significant majority of the House of Commons\",\n    align = \"left\"\n    ) %&gt;%\n  hc_subtitle(\n    text = \"An item chart showing the proportion of male and femal MPs in the House of Commons, on 31st December 2024.\",\n    align = \"left\"\n    ) |&gt;\n  hc_legend(labelFormat = '{name} &lt;span style=\"opacity: 0.4\"&gt;{y}&lt;/span&gt;')\n\n\n\n\n\n\n\n\nTo change the plot to a circular layout, set startAngle = -180 and endAngle = 180 and change the center argument.\n\n\nCode\nhchart(\n  mps_gender,\n  \"item\",\n  hcaes(\n    name = gender,\n    y = n,\n    color = col\n  ),\n  name = \"Number of MPs\",\n  showInLegend = TRUE,\n  size = \"100%\",\n  center = list(\"50%\", \"50%\"),\n  startAngle = -180,\n  endAngle  = 180\n) %&gt;%\n  hc_title(\n    text = \"Male MPs make up a significant majority of the House of Commons\",\n    align = \"left\"\n    ) %&gt;%\n  hc_subtitle(\n    text = \"An item chart showing the proportion of male and femal MPs in the House of Commons, on 31st December 2024.\",\n    align = \"left\"\n    ) |&gt;\n  hc_legend(labelFormat = '{name} &lt;span style=\"opacity: 0.4\"&gt;{y}&lt;/span&gt;')\n\n\n\n\n\n\n\n\n\n\n\nAdding symbols to the icon chart\nWhat if we want female and male symbols instead of circles, and the icons arranges in a rectangle?\nFirst, lets add the icons to the tibble. We will use the {fontawesome} package (Iannone 2024), alongside the function given in the {highcharter} vignette to obtain the symbols.\n\nIannone, Richard. 2024. Fontawesome: Easily Work with ’Font Awesome’ Icons. https://github.com/rstudio/fontawesome.\n\n\nCode\nfa_to_png_to_datauri &lt;- function(name, ...) {\n  tmpfl &lt;- tempfile(fileext = \".png\")\n  fontawesome::fa_png(name, file = tmpfl, ...)\n  knitr::image_uri(tmpfl)\n\n}\n\n\nAdding the ‘person’ and ‘person-dress’ symbols to the tibble.\n\n\nCode\nmps_gender_icon &lt;- mps_gender |&gt;\n  add_column(faico = c(\"person-dress\", \"person\"))\n\nmps_gender_icon &lt;- mps_gender_icon |&gt;\n  mutate(\n    uri = map2_chr(faico, col, ~fa_to_png_to_datauri(.x, fill = .y)),\n    marker = map(uri, ~ list(symbol = str_glue(\"url({data_uri})\", data_uri = .x)))\n  )\n\n\nCreating the new icon plot.\n\n\nCode\nhchart(\n  mps_gender_icon,\n  \"item\",\n  hcaes(\n    name = gender,\n    y = n,\n    color = col\n  ),\n  name = \"Number of MPs\",\n  showInLegend = TRUE,\n  size = \"100%\"\n) |&gt;\n  hc_title(\n    text = \"Male MPs make up a significant majority of the House of Commons\",\n    align = \"left\"\n    ) |&gt;\n  hc_subtitle(\n    text = \"An item chart showing the proportion of male and femal MPs in the House of Commons, on 31st December 2024.\",\n    align = \"left\"\n    ) |&gt;\n  hc_legend(labelFormat = '{name} &lt;span style=\"opacity: 0.4\"&gt;{y}&lt;/span&gt;') |&gt;\n  hc_plotOptions(\n    item = list(\n      layout = \"vertical\",\n      rows = 18 # Specify the number of rows here\n    )\n  )"
  },
  {
    "objectID": "posts/03-highcharter_graphs/index.html#line-graphs",
    "href": "posts/03-highcharter_graphs/index.html#line-graphs",
    "title": "Some Highcharter Graphs",
    "section": "Line graphs",
    "text": "Line graphs\n\n\nCode\nthoimon &lt;- tibble(medicaldata::thiomon)"
  }
]